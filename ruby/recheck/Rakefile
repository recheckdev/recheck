VERSION_FILE = "lib/recheck/version.rb"
require_relative VERSION_FILE
require "io/console"

def system!(*args)
  puts "Running: #{args}"
  system(*args) || abort("\nCommand #{args} failed")
end

def gem_name
  "recheck"
end

desc "Run test suite"
task :test do
  recheck_exit_code = system("bundle exec megatest")
  recheck_exit_code == 0
end

desc "Bump version number"
task :bump, [:version] do |_, args|
  version = args[:version]

  if version.nil? || version.empty?
    puts "Error: Version argument is required"
    puts "Usage: rake bump[x.y.z]"
    exit 1
  end

  # Update version.rb file
  content = File.read(VERSION_FILE)
  updated_content = content.gsub(/VERSION\s*=\s*['"][\d\.]+['"]/, "VERSION = '#{version}'")

  File.write(VERSION_FILE, updated_content)
  puts "Updated #{VERSION_FILE} to version #{version}"

  # Update the VERSION constant in the current process for other tasks
  Recheck.send(:remove_const, :VERSION)
  Recheck.const_set(:VERSION, version)
end

def gem_filename
  gem_filename = "build/#{gem_name}-#{Recheck::VERSION}.gem"
end

desc "Build all gems"
task :build do
  system! "gem build #{gem_name}.gemspec -o #{gem_filename}"
end

desc "Check the gem's changelog.md"
task check: [] do |_, args|
  errors = false
  puts "check"

  changelog_path = "changelog.md"
  content = File.read(changelog_path)
  sections = content.split(/^## /).drop(1).map { |s| "## #{s}" }

  # Check for non-empty Unreleased section
  unreleased = sections.find { |s| s.start_with?("## [Unreleased]") }
  if unreleased
    unreleased_content = unreleased.gsub(/^## \[Unreleased\].*?$/, "").strip
    next_heading = unreleased_content.match(/^##\s/)

    if next_heading.nil? && !unreleased_content.empty?
      puts "Error: #{changelog_path} has changles listed as [Unreleased]"
      errors = true
    end
  end

  # Check for current version
  current_version_section = sections.find { |s| s.match?(/^## #{Regexp.escape(Recheck::VERSION)}/o) }
  if current_version_section.nil?
    puts "Error: #{changelog_path} is missing entry for version #{Recheck::VERSION}"
    errors = true
  else
    # Check if the current version section has content
    version_content = current_version_section.gsub(/^## #{Regexp.escape(Recheck::VERSION)}.*?$/o, "").strip
    next_heading = version_content.match(/^##\s/)

    if next_heading || version_content.empty?
      puts "Error: #{changelog_path} has empty content for version #{Recheck::VERSION}"
      errors = true
    end
  end

  exit 1 if errors
  !errors
end

desc "Push gem to RubyGems"
task :push do
  system! "gem push #{gem_filename}"
end

desc "Release new version"
task :release do
  # Display changelogs for review
  puts "\n#{gem_name} changelog.md:"
  puts "=" * 40
  changelog_path = "changelog.md"
  if File.exist?(changelog_path)
    puts File.read(changelog_path)
  else
    puts "changelog.md not found"
    exit 1
  end
  puts "=" * 40

  # Ask for confirmation
  print "\nCut a new release? (y/N): "
  response = $stdin.gets.chomp.downcase
  exit 0 unless response == "y"

  # Prompt for new version
  print "Enter new version number: "
  new_version = $stdin.gets.chomp

  if new_version.empty? || !new_version.match?(/^\d+\.\d+\.\d+$/)
    puts "Invalid version format. Expected x.y.z"
    exit 1
  end

  # Update changelog
  changelog_path = "changelog.md"
  next unless File.exist?(changelog_path)

  content = File.read(changelog_path)
  sections = content.split(/^## /)

  # Find the Unreleased section
  header = sections[0]
  unreleased_idx = sections.find_index { |s| s.start_with?("[Unreleased]") }

  exit 1 unless unreleased_idx
  unreleased = sections[unreleased_idx]
  unreleased_content = unreleased.gsub(/^\[Unreleased\].*?$/, "").strip

  # Check if there are unreleased changes
  if unreleased_content.empty? || unreleased_content.match?(/^##\s/)
    # No unreleased changes, create a new version section with placeholder text
    version_section = "#{new_version} - #{Time.now.strftime("%Y-%m-%d")}\n\nNo changes, released to keep version in step with other gem(s).\n\n"
  else
    # There are unreleased changes, create a new version section with those changes
    version_section = "#{new_version} - #{Time.now.strftime("%Y-%m-%d")}\n\n#{unreleased_content}\n\n"

    # Replace unreleased content with empty section
    sections[unreleased_idx] = "[Unreleased]\n\n"
  end

  # Insert new version section
  sections.insert(unreleased_idx + 1, version_section)

  # Reconstruct the changelog
  new_content = header + sections.map { |s| "## #{s}" }.join
  File.write(changelog_path, new_content)
  puts "Updated #{changelog_path}"

  # Update version.rb
  Rake::Task["bump"].invoke(new_version)

  # Run check, build, and push tasks
  begin
    unless Rake::Task["test"].invoke
      puts "Tests failed; release halted"
      exit 1
    end
    Rake::Task["check"].invoke
    Rake::Task["build"].invoke
    Rake::Task["push"].invoke
    puts "\nRelease #{new_version} completed successfully!"
  rescue => e
    puts "\nRelease failed: #{e.message}"
    exit 1
  end
end
